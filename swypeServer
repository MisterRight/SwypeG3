package swypeServer;
/**
 *
 * @author Jamie Gilbertson
 */
import userPackage.*;
import javax.jws.WebService;
import javax.jws.WebMethod;
import java.util.*;
import java.io.*;

@WebService
public class swypeServer {
    
    private static ArrayList<ServerUser> registeredUserList;
    private static HashMap userMessages = new HashMap();
    private static final String adminPassword = "eggcook31";
    private static final UserDetails failedUser = new UserDetails("failed", "failed", "failed", "failed", "failed", new Date(0), 0);
    private static int usercount = 1;
    
    
    @WebMethod
    public UserDetails register(String username, String password, String firstName, String lastName, String telephoneNo, String city, Date birthday){
        synchronized(registeredUserList){
            //check if user already exists and return failed-state UserDetails if true
            for (int i = 0; i < registeredUserList.size(); i++){
                registeredUserList.get(i);
                if (((registeredUserList.get(i).getDetails()).getUsername()).equals(username)){
                    return failedUser;
                }
            }
            //create new UserDetails and ServerUser intances, add ServerUser to registeredUserList and return UserDetails instance to client
            UserDetails tempDetails = new UserDetails(username, firstName, lastName, telephoneNo, city, birthday, usercount++);
            ServerUser tempUser = new ServerUser(tempDetails, password);
            registeredUserList.add(tempUser);
            userMessages.put(tempUser.getDetails().getUserID(), new UserMessages()); //automatically sets user online status to true
            return tempDetails;
            
            //TODO save to disk
        }
    }
    
    private void tellFriendsOnline(Integer userID){
        UserMessages senderMessage = (UserMessages) userMessages.get(userID);
        UserMessages tempMessage;
        //check user has friends, then iterate through them and send server message informing them of friend online
        if(senderMessage.getFriendList().size() < 0){
            for(int i = 0; i < senderMessage.getFriendList().size(); i++){
                tempMessage = (UserMessages)userMessages.get(senderMessage.getFriendList().get(i));
                tempMessage.addServerMessage(userID + ";Online");
                userMessages.put(senderMessage.getFriendList().get(i), tempMessage);
            }
        }
    }
    
    private void tellFriendsOffline(Integer userID){
        UserMessages senderMessage = (UserMessages) userMessages.get(userID);
        UserMessages tempMessage;
        //check user has friends, then iterate through them and send server message informing them of friend online
        for(int i = 0; i < senderMessage.getFriendList().size(); i++){
            tempMessage = (UserMessages)userMessages.get(senderMessage.getFriendList().get(i));
            tempMessage.addServerMessage(userID + ";Offline");
            userMessages.put(senderMessage.getFriendList().get(i), tempMessage);
        }
    }
    
    @WebMethod
    public UserDetails logIn(String username, String password){
        synchronized(registeredUserList){
            //check if user is already logged in
            for (int i = 0; i < registeredUserList.size(); i++){
                if(registeredUserList.get(i).getOnlineStatus()){
                    if(registeredUserList.get(i).getDetails().getUsername().equals(username)){
                        return failedUser;
                    }
                }
            }
            //check password is correct, set their status to online, update their last online value, and tell their friends
            ServerUser temp;
            for (int i = 0; i < registeredUserList.size(); i++){
                temp = registeredUserList.get(i);
                if ((temp.getPassword()).equals(password)){
                    temp.getDetails().updateLastOnline();
                    temp.setOnlineStatus(true);
                    tellFriendsOnline(temp.getDetails().getUserID());
                    return temp.getDetails();
                }
            }
            return failedUser;
        }
    }
    
    @WebMethod 
    public ArrayList<UserDetails> getFriends(Integer userID){
        synchronized(userMessages){
            UserMessages temp = (UserMessages) userMessages.get(userID);
            ArrayList<Integer> tempList = temp.getFriendList();
            ArrayList<UserDetails> returnList = new ArrayList();
            for (int j = 0; j < tempList.size(); j++){
                for (int i = 0; i < registeredUserList.size(); i++){
                    if(registeredUserList.get(i).getDetails().getUserID() == tempList.get(j)){
                        returnList.add(registeredUserList.get(i).getDetails());
                    }
                }
            }
            return returnList;
        }
    }
    
    @WebMethod
    public void logout(int userID){
        synchronized(registeredUserList){
            //find user, set their status to offline, update their last online value, and tell their friends
            for (int i = 0; i < registeredUserList.size(); i++){
                if(registeredUserList.get(i).getDetails().getUserID() == userID){
                    registeredUserList.get(i).setOnlineStatus(false);
                    registeredUserList.get(i).getDetails().updateLastOnline();
                    tellFriendsOffline(registeredUserList.get(i).getDetails().getUserID());
                    return;
                }
            }
        }
    }
    
    
    @WebMethod
    public UserDetails userSearch(String username){
        synchronized(registeredUserList){
            UserDetails temp;
            //find user and return their details
            for (int i = 0; i < registeredUserList.size(); i++){
                    temp = registeredUserList.get(i).getDetails();
                    if ((temp.getUsername()).equals(username)){
                        return temp;
                    }
                }
            //user not found, send failed state user
            return failedUser;
        }
    }
    
    
    @WebMethod
    public void acceptFriend (int requesteeID, int requesterID){
        synchronized(userMessages){
                //add both users to each other's friend lists
                UserMessages tempMessage1 = (UserMessages) userMessages.get(requesterID);
                UserMessages tempMessage2 = (UserMessages) userMessages.get(requesteeID);
                tempMessage1.addFriend(requesteeID);
                tempMessage2.addFriend(requesterID);
                userMessages.put(requesterID, tempMessage1);
                userMessages.put(requesteeID, tempMessage2);
                //tell the user who sent the friend request that it has been accepted
                String tempMessage = requesteeID + ";Accepted";
                addServerMessage(requesterID, tempMessage);

        }
    }
    
    
    @WebMethod
    public void addFriend (int requesterID, int requesteeID){
        addServerMessage(requesteeID, ";FriendRequest");
    }
    
    
    @WebMethod
    public void deleteFriend (int deleterID, int deletedID){
        synchronized(userMessages){
                //add both users to each other's friend lists
                UserMessages tempMessage1 = (UserMessages) userMessages.get(deletedID);
                UserMessages tempMessage2 = (UserMessages) userMessages.get(deleterID);
                tempMessage1.removeFriend(deleterID);
                tempMessage2.removeFriend(deletedID);
                userMessages.put(deletedID, tempMessage1);
                userMessages.put(deleterID, tempMessage2);
                //tell the user who sent the friend request that it has been accepted
                String tempMessage = deletedID + ";Unfriended";
                addServerMessage(deleterID, tempMessage);
        }
    }
    
    
    @WebMethod
    public HashWrap getTextMessage(int ID){
        UserMessages tempMessage = (UserMessages) userMessages.get(ID);
        HashMap tempMap = tempMessage.getNewMessages();
        userMessages.put(ID, tempMessage);
        return new HashWrap(tempMap);
    }
    
    
    @WebMethod
    public Byte[] getImageMessage(int ID){
    //TODO images will likely be saved to disk, may have to adjust server to load images from disk before sending
        UserMessages tempMessage = (UserMessages)userMessages.get(ID);
        if( tempMessage.getImageSent()){
            Byte[] tempImage = tempMessage.getImage();
            tempMessage.setImage(new Byte[0]);
            tempMessage.setImageSent(false);
            userMessages.put(ID, tempMessage);
            return tempImage;
        }
        return new Byte[0];
    }
    
    
    @WebMethod
    public void getHyperlinkMessage(int ID){
    //TODO need to program actually opening hyperlinks from inside a client first
    }
    
    
    @WebMethod
    public void getFileMessage(int ID){
    //TODO should be the same as images, not sure yet
    }    
    
    @WebMethod
    public void getConferenceMessages(ArrayList conferences){
    //TODO
    }
    
    
    @WebMethod
    public void startGroup(ArrayList<UserDetails> users, String name){
    //TODO
    }
    
    
    @WebMethod
    public void talkText(int sendID, int recID, String message){
    //TODO may require revision, may store Messages as arrayList rather than String, or perhaps as a special friend class
        UserMessages tempMessage = (UserMessages)userMessages.get(recID);
        tempMessage.newMessage(sendID, message);
        userMessages.put(recID, tempMessage);
    }
    
    
    @WebMethod
    public int talkImage(int sendID, int recID, Byte[] imageByte){
    //TODO may require revision, may store multiple byte arrays in arrayList
        UserMessages tempMessage = (UserMessages)userMessages.get(recID);
        if(!tempMessage.getImageSent()){
            tempMessage.setImage(imageByte);
            userMessages.put(recID, tempMessage);
            return 1; //successful
        }
        else{
            return 2; //user not yet received previous image
        }
    }
    
    
    private void addServerMessage(int userID, String message){
        UserMessages tempMessage = (UserMessages)userMessages.get(userID);
        tempMessage.addServerMessage(message);
        userMessages.put(userID, tempMessage);
    }
}
